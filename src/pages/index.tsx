/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import Head from "next/head";
import { useEffect, useState } from "react";
import type { Plan } from "~/types/plan";
import GoogleMapComponent from '../lib/components/googleMap';
import { LoadingSpinner } from "../lib/components/loading";
import { plansColumns } from "../lib/components/table/plansColumns";
import { DataTable } from "../lib/components/table/plansTable";

export default function Home() {

    const [plans, setPlans] = useState<Plan[]>([])
    const [timeframe, setTimeframe] = useState<string>("l30")
    const [isLoading, setIsLoading] = useState<boolean>(false)

    const getPlans = async () => {
        setIsLoading(true)
        const offset = new Date().getTimezoneOffset()
        const startDate = new Date(Date.now() - (offset * 60 * 1000))
        const endDate = new Date(Date.now() - (offset * 60 * 1000))
        switch (timeframe) {
            case "l30":
                startDate.setDate(startDate.getDate() - 30)
                endDate.setDate(endDate.getDate() + 1)
                break;
            case "ty":
                startDate.setMonth(0)
                startDate.setDate(0)
                break;
            case "ly":
                startDate.setFullYear(startDate.getFullYear() - 1)
                startDate.setMonth(0)
                startDate.setDate(0)
                endDate.setFullYear(endDate.getFullYear() - 1)
                endDate.setMonth(11)
                endDate.setDate(30)
                break;
            case "at":
                startDate.setFullYear(2021)
                startDate.setMonth(4)
                startDate.setDate(1)
            default:
                break;
        }
        const start = startDate.toISOString().split('T')[0] as string
        const end = endDate.toISOString().split('T')[0] as string

        const plansResponse = await fetch(`/api/plans/?startDate=${start}&endDate=${end}`)
        const plans = await plansResponse.json() as Plan[];

        setPlans(plans)
    }

    useEffect(() => {
        setIsLoading(false)
    }, [plans])

    function classNames(...classes: unknown[]) {
        return classes.filter(Boolean).join(' ')
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
                <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
                    <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Fayetteville <span className="text-[hsl(280,100%,70%)]">STRs</span>
                    </h1>
                    <div className="flex flex-row gap-4 items-center justify-center">
                        <select
                            placeholder="Choose one"
                            id="timeframe"
                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-xl focus:ring-blue-500 focus:border-blue-500 block p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                            onChange={(event) => setTimeframe(event.target.value)}
                        >
                            <option value="l30">Last 30 Days</option>
                            <option value="ty">This Year</option>
                            <option value="ly">Last Year</option>
                            <option value="at">All Time</option>
                        </select>
                        <div>
                            <button
                                className="bg-white/10 hover:bg-white/20 text-white rounded-xl px-4 py-2"
                                onClick={() => void getPlans()}
                            >
                                Go
                            </button>
                        </div>
                    </div>
                    {isLoading ? <div className="w-full h-12 flex items-center justify-center"><LoadingSpinner size={48} /></div> : ""}
                    <div className="container mx-auto py-2 text-white">
                        {plans && plans.length > 0 ? <GoogleMapComponent markers={plans} /> : ""}
                    </div>
                    <div className="container mx-auto py-2 text-white">
                        {plansColumns && plans && plans.length > 0 ? <DataTable columns={plansColumns} data={plans} /> : ""}
                    </div>
                </div>
            </main>
        </>
    );
}
